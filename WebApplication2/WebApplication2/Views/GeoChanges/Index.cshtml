@model List<WebApplication2.Data.GeoChange>
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@{
    ViewData["Title"] = "Overview";
    Layout = "_Layout";
    var user = await UserManager.GetUserAsync(User);

    // Create a dictionary to map UserId to Email
    var userEmails = new Dictionary<string, string>();

    // Fetch emails for each userId in the model
    foreach (var change in Model)
    {
        if (!userEmails.ContainsKey(change.UserId))
        {
            var applicationUser = await UserManager.FindByIdAsync(change.UserId);
            if (applicationUser != null)
            {
                userEmails[change.UserId] = applicationUser.Email; // Store the email in the dictionary
            }
        }
    }
}

<div class="container mt-5">
<h2 class="text-center">Oversikt over innsendte meldinger</h2>
</div>

<div class="container mt-5">
    <div class="row">
        <!-- Left Side: Map -->
        <div class="col-md-6">
            <div id="map" style="height: 500px; width: 100%; border: 3px solid #ccc;"></div>
        </div>

        <!-- Right Side: Details Table -->
        <div class="col-md-6">
            <table class="table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Beskrivelse</th>
                        <th>Email</th> <!-- Add Email column -->
                        <th>Status</th>
                        <th>Kommune</th>
                        <th>Fylke</th>
                        <th>Karttype</th>
                        <th>Rediger</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var change in Model)
                    {
                        <tr>
                            <td>@change.Id</td>
                            <td>@change.Description</td>
                            <td>@userEmails[change.UserId]</td> <!-- Display Email -->
                            <td>@change.Status</td>
                            <td>@change.MunicipalityName</td>
                            <td>@change.CountyName</td>
                            <td>@change.MapVariant</td>
                            <td>
                                <div class="edit-delete-links">
                                    <a asp-controller="GeoChanges" asp-action="Edit" asp-route-id="@change.Id" asp-route-returnUrl="@Url.Action("Index", "GeoChanges")">Rediger</a> |
                                    <a asp-controller="GeoChanges" asp-action="Delete" asp-route-id="@change.Id" asp-route-returnUrl="@Url.Action("Index", "GeoChanges")">Slett</a>

                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    @section Scripts {
        <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
        <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

        <script>
            // Initialize the map and set its initial view
            var map = L.map('map').setView([58.164048, 8.004007], 13);

            // Add a tile layer
            L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/topo/default/webmercator/{z}/{y}/{x}.png', {
                attribution: 'Kartdata &copy; <a href="https://www.kartverket.no/">Kartverket</a>'
            }).addTo(map);

            // Iterate over the registered changes and add them to the map
            var changes = @Json.Serialize(Model);

            changes.forEach(function (change) {
                var geoJsonData = JSON.parse(change.geoJson);
                L.geoJSON(geoJsonData).addTo(map);

                var layer = L.geoJSON(geoJsonData).bindPopup(change.description);
                layer.addTo(map);
            });
        </script>
    }