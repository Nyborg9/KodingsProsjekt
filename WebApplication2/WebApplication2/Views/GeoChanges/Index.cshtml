@model List<WebApplication2.Data.GeoChange>
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@{
    ViewData["Title"] = "Overview";

    Layout = "_Layout";
    var user = await UserManager.GetUserAsync(User);
}

<div class="container mt-5">
    <h5 class="text-left">User: @user.UserName</h5>
</div>

<!-- User Data Section -->
<h2 class="text-center">Oversikt over innsendte meldinger</h2>

<div class="container mt-5">
    <div class="row">
        <!-- Left Side: Map -->
        <div class="col-md-6">
            <!-- Container for the map, with specified height and border -->
            <div id="map" style="height: 500px; width: 100%; border: 3px solid #ccc;"></div>
        </div>

        <!-- Right Side: Details Table -->
        <div class="col-md-6">
            <!-- Start of the Bootstrap table for displaying changes -->
            <table class="table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>GeoJSON</th>
                        <th>Beskrivelse</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var change in Model)

                    {
                        <tr>
                            <td>@change.Id</td>
                            <td>@change.GeoJson</td>
                            <td>@change.Description</td>
                            <td>@change.UserId</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>



    @section Scripts {
        <!-- Important to include Leaflet CSS and JS -->
        <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
        <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

        <script>
            // Initialize the map and set its initial view
            var map = L.map('map').setView([58.164048, 8.004007], 13);  // Adjust the coordinates and zoom level as needed

            // Add a tile layer (using OpenStreetMap)
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap contributors'
            }).addTo(map);

            // Iterate over the registered changes and add them to the map
            var changes = @Json.Serialize(Model);

            changes.forEach(function (change) {
                // Parse the GeoJSON data and add it to the map
                var geoJsonData = JSON.parse(change.geoJson);
                L.geoJSON(geoJsonData).addTo(map);

                // Optionally, bind a popup with the change description
                var layer = L.geoJSON(geoJsonData).bindPopup(change.description);
                layer.addTo(map);
            });
        </script>
    }
