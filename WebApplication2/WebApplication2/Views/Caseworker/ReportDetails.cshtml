@model WebApplication2.Data.GeoChange
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser > UserManager
@{
    ViewData["Title"] = "Detaljer for Rapport";
   

    // Fetch the user associated with this GeoChange
    var applicationUser = await UserManager.FindByIdAsync(Model.UserId);
    var userEmail = applicationUser?.Email ?? "N/A"; // Use "N/A" if email is not found
}

<h4 class="text-center">Detaljer for Rapport @Model.Id</h4>

<div class="container mt-5">
    <div class="row">
        <!-- Left Side: Map -->
        <div class="col-md-6">
            <div id="map" style="height: 500px; width: 100%; border: 3px solid #ccc;"></div>
        </div>

        <!-- Right Side: Details Section -->
        <div class="col-md-6">
            <h6>Beskrivelse:</h6>
            <p>@Model.Description</p>

            <!-- Vise geoJSON informajon -->
            <h6>GeoJSON:</h6>
            <pre>@Model.GeoJson</pre>

            <!-- Vise epost til innsender -->
            <h6>Email:</h6>
            <p>@userEmail</p> 

            <!-- Status funksjon kommer her -->
            <h6>Status:</h6>

            <!-- Prioritteringsmuligheter kommer her -->
            <h6>Prioritering:</h6>

            <h6>Administrer:</h6>
            |<a asp-controller="GeoChanges" asp-action="Edit" asp-route-id="@Model.Id">Rediger</a> |
            |<a asp-controller="GeoChanges" asp-action="Delete" asp-route-id="@Model.Id">Slett</a> |

            
        </div>
    </div>
</div>

@section Scripts {
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

    <script>
        // Initialize the map
        var map = L.map('map').setView([58.164048, 8.004007], 13); // Adjust the coordinates and zoom level as needed

        // Add a tile layer
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        // Parse the GeoJSON data and add it to the map
        var geoJsonData = @Html.Raw(Model.GeoJson); // Directly use the GeoJSON string

        // Check if geoJsonData is valid before adding to the map
        if (geoJsonData) {
            var geoJsonLayer = L.geoJSON(geoJsonData).addTo(map);

            // Optionally, fit the map to the GeoJSON bounds
            map.fitBounds(geoJsonLayer.getBounds());
        } else {
            console.error("Invalid GeoJSON data.");
        }
    </script>
}